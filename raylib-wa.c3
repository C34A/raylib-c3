func void init_window(int width, int height, byte *title) @extname("InitWindow");
func bool window_should_close() @extname("WindowShouldClose");
func void close_window() @extname("CloseWindow");
func bool is_window_ready() @extname("IsWindowReady");
func bool is_window_fullscreen() @extname("IsWindowFullscreen");
func bool is_window_hidden() @extname("IsWindowHidden");
func bool is_window_minimized() @extname("IsWindowMinimized");
func bool is_window_maximized() @extname("IsWindowMaximized");
func bool is_window_focused() @extname("IsWindowFocused");
func bool is_window_resized() @extname("IsWindowResized");
func bool is_window_state(uint flag) @extname("IsWindowState");
func void set_window_state(uint flags) @extname("SetWindowState");
func void clear_window_state(uint flags) @extname("ClearWindowState");
func void toggle_fullscreen() @extname("ToggleFullscreen");
func void maximize_window() @extname("MaximizeWindow");
func void minimize_window() @extname("MinimizeWindow");
func void restore_window() @extname("RestoreWindow");
func void set_window_icon(Image image) @extname("SetWindowIcon");
func void set_window_title(byte *title) @extname("SetWindowTitle");
func void set_window_position(int x, int y) @extname("SetWindowPosition");
func void set_window_monitor(int monitor) @extname("SetWindowMonitor");
func void set_window_min_size(int width, int height) @extname("SetWindowMinSize");
func void set_window_size(int width, int height) @extname("SetWindowSize");
func void *_get_window_handle() @extname("*GetWindowHandle");
func int get_screen_width() @extname("GetScreenWidth");
func int get_screen_height() @extname("GetScreenHeight");
func int get_monitor_count() @extname("GetMonitorCount");
func int get_current_monitor() @extname("GetCurrentMonitor");
func Vector2 get_monitor_position(int monitor) @extname("GetMonitorPosition");
func int get_monitor_width(int monitor) @extname("GetMonitorWidth");
func int get_monitor_height(int monitor) @extname("GetMonitorHeight");
func int get_monitor_physical_width(int monitor) @extname("GetMonitorPhysicalWidth");
func int get_monitor_physical_height(int monitor) @extname("GetMonitorPhysicalHeight");
func int get_monitor_refresh_rate(int monitor) @extname("GetMonitorRefreshRate");
func Vector2 get_window_position() @extname("GetWindowPosition");
func Vector2 get_window_scale_dpi() @extname("GetWindowScaleDPI");
func byte *_get_monitor_name(int monitor) @extname("*GetMonitorName");
func void set_clipboard_text(byte *text) @extname("SetClipboardText");
func byte *_get_clipboard_text() @extname("*GetClipboardText");
func void swap_screen_buffer() @extname("SwapScreenBuffer");
func void poll_input_events() @extname("PollInputEvents");
func void wait_time(float ms) @extname("WaitTime");
func void show_cursor() @extname("ShowCursor");
func void hide_cursor() @extname("HideCursor");
func bool is_cursor_hidden() @extname("IsCursorHidden");
func void enable_cursor() @extname("EnableCursor");
func void disable_cursor() @extname("DisableCursor");
func bool is_cursor_on_screen() @extname("IsCursorOnScreen");
func void clear_background(Color color) @extname("ClearBackground");
func void begin_drawing() @extname("BeginDrawing");
func void end_drawing() @extname("EndDrawing");
func void begin_mode2_d(Camera2D camera) @extname("BeginMode2D");
func void end_mode2_d() @extname("EndMode2D");
func void begin_mode3_d(Camera3D camera) @extname("BeginMode3D");
func void end_mode3_d() @extname("EndMode3D");
func void begin_texture_mode(RenderTexture2D target) @extname("BeginTextureMode");
func void end_texture_mode() @extname("EndTextureMode");
func void begin_shader_mode(Shader shader) @extname("BeginShaderMode");
func void end_shader_mode() @extname("EndShaderMode");
func void begin_blend_mode(int mode) @extname("BeginBlendMode");
func void end_blend_mode() @extname("EndBlendMode");
func void begin_scissor_mode(int x, int y, int width, int height) @extname("BeginScissorMode");
func void end_scissor_mode() @extname("EndScissorMode");
func void begin_vr_stereo_mode(VrStereoConfig config) @extname("BeginVrStereoMode");
func void end_vr_stereo_mode() @extname("EndVrStereoMode");
func VrStereoConfig load_vr_stereo_config(VrDeviceInfo device) @extname("LoadVrStereoConfig");
func void unload_vr_stereo_config(VrStereoConfig config) @extname("UnloadVrStereoConfig");
func Shader load_shader(byte *vsFileName, byte *fsFileName) @extname("LoadShader");
func Shader load_shader_from_memory(byte *vsCode, byte *fsCode) @extname("LoadShaderFromMemory");
func int get_shader_location(Shader shader, byte *uniformName) @extname("GetShaderLocation");
func int get_shader_location_attrib(Shader shader, byte *attribName) @extname("GetShaderLocationAttrib");
func void set_shader_value(Shader shader, int locIndex, void *value, int uniformType) @extname("SetShaderValue");
func void set_shader_value_v(Shader shader, int locIndex, void *value, int uniformType, int count) @extname("SetShaderValueV");
func void set_shader_value_matrix(Shader shader, int locIndex, Matrix mat) @extname("SetShaderValueMatrix");
func void set_shader_value_texture(Shader shader, int locIndex, Texture2D texture) @extname("SetShaderValueTexture");
func void unload_shader(Shader shader) @extname("UnloadShader");
func Ray get_mouse_ray(Vector2 mousePosition, Camera camera) @extname("GetMouseRay");
func Matrix get_camera_matrix(Camera camera) @extname("GetCameraMatrix");
func Matrix get_camera_matrix2_d(Camera2D camera) @extname("GetCameraMatrix2D");
func Vector2 get_world_to_screen(Vector3 position, Camera camera) @extname("GetWorldToScreen");
func Vector2 get_world_to_screen_ex(Vector3 position, Camera camera, int width, int height) @extname("GetWorldToScreenEx");
func Vector2 get_world_to_screen2_d(Vector2 position, Camera2D camera) @extname("GetWorldToScreen2D");
func Vector2 get_screen_to_world2_d(Vector2 position, Camera2D camera) @extname("GetScreenToWorld2D");
func void set_target_fps(int fps) @extname("SetTargetFPS");
func int get_fps() @extname("GetFPS");
func float get_frame_time() @extname("GetFrameTime");
func double get_time() @extname("GetTime");
func int get_random_value(int min, int max) @extname("GetRandomValue");
func void take_screenshot(byte *fileName) @extname("TakeScreenshot");
func void set_config_flags(uint flags) @extname("SetConfigFlags");
func void trace_log(int logLevel, byte *text, ...) @extname("TraceLog");
func void set_trace_log_level(int logLevel) @extname("SetTraceLogLevel");
func void *_mem_alloc(int size) @extname("*MemAlloc");
func void *_mem_realloc(void *ptr, int size) @extname("*MemRealloc");
func void mem_free(void *ptr) @extname("MemFree");
func void set_trace_log_callback(TraceLogCallback callback) @extname("SetTraceLogCallback");
func void set_load_file_data_callback(LoadFileDataCallback callback) @extname("SetLoadFileDataCallback");
func void set_save_file_data_callback(SaveFileDataCallback callback) @extname("SetSaveFileDataCallback");
func void set_load_file_text_callback(LoadFileTextCallback callback) @extname("SetLoadFileTextCallback");
func void set_save_file_text_callback(SaveFileTextCallback callback) @extname("SetSaveFileTextCallback");
func byte *_load_file_data(byte *fileName, uint *bytesRead) @extname("*LoadFileData");
func void unload_file_data(byte *data) @extname("UnloadFileData");
func bool save_file_data(byte *fileName, void *data, uint bytesToWrite) @extname("SaveFileData");
func byte *_load_file_text(byte *fileName) @extname("*LoadFileText");
func void unload_file_text(byte *text) @extname("UnloadFileText");
func bool save_file_text(byte *fileName, byte *text) @extname("SaveFileText");
func bool file_exists(byte *fileName) @extname("FileExists");
func bool directory_exists(byte *dirPath) @extname("DirectoryExists");
func bool is_file_extension(byte *fileName, byte *ext) @extname("IsFileExtension");
func byte *_get_file_extension(byte *fileName) @extname("*GetFileExtension");
func byte *_get_file_name(byte *filePath) @extname("*GetFileName");
func byte *_get_file_name_without_ext(byte *filePath) @extname("*GetFileNameWithoutExt");
func byte *_get_directory_path(byte *filePath) @extname("*GetDirectoryPath");
func byte *_get_prev_directory_path(byte *dirPath) @extname("*GetPrevDirectoryPath");
func byte *_get_working_directory() @extname("*GetWorkingDirectory");
func byte **_get_directory_files(byte *dirPath, int *count) @extname("**GetDirectoryFiles");
func void clear_directory_files() @extname("ClearDirectoryFiles");
func bool change_directory(byte *dir) @extname("ChangeDirectory");
func bool is_file_dropped() @extname("IsFileDropped");
func byte **_get_dropped_files(int *count) @extname("**GetDroppedFiles");
func void clear_dropped_files() @extname("ClearDroppedFiles");
func long get_file_mod_time(byte *fileName) @extname("GetFileModTime");
func byte *_compress_data(byte *data, int dataLength, int *compDataLength) @extname("*CompressData");
func byte *_decompress_data(byte *compData, int compDataLength, int *dataLength) @extname("*DecompressData");
func bool save_storage_value(uint position, int value) @extname("SaveStorageValue");
func int load_storage_value(uint position) @extname("LoadStorageValue");
func void open_url(byte *url) @extname("OpenURL");
func bool is_key_pressed(KeyboardKey key) @extname("IsKeyPressed");
func bool is_key_down(KeyboardKey key) @extname("IsKeyDown");
func bool is_key_released(KeyboardKey key) @extname("IsKeyReleased");
func bool is_key_up(KeyboardKey key) @extname("IsKeyUp");
func void set_exit_key(KeyboardKey key) @extname("SetExitKey");
func int get_key_pressed() @extname("GetKeyPressed");
func int get_char_pressed() @extname("GetCharPressed");
func bool is_gamepad_available(int gamepad) @extname("IsGamepadAvailable");
func bool is_gamepad_name(int gamepad, byte *name) @extname("IsGamepadName");
func byte *_get_gamepad_name(int gamepad) @extname("*GetGamepadName");
func bool is_gamepad_button_pressed(int gamepad, MouseButton button) @extname("IsGamepadButtonPressed");
func bool is_gamepad_button_down(int gamepad, MouseButton button) @extname("IsGamepadButtonDown");
func bool is_gamepad_button_released(int gamepad, MouseButton button) @extname("IsGamepadButtonReleased");
func bool is_gamepad_button_up(int gamepad, MouseButton button) @extname("IsGamepadButtonUp");
func int get_gamepad_button_pressed() @extname("GetGamepadButtonPressed");
func int get_gamepad_axis_count(int gamepad) @extname("GetGamepadAxisCount");
func float get_gamepad_axis_movement(int gamepad, int axis) @extname("GetGamepadAxisMovement");
func int set_gamepad_mappings(byte *mappings) @extname("SetGamepadMappings");
func bool is_mouse_button_pressed(MouseButton button) @extname("IsMouseButtonPressed");
func bool is_mouse_button_down(MouseButton button) @extname("IsMouseButtonDown");
func bool is_mouse_button_released(MouseButton button) @extname("IsMouseButtonReleased");
func bool is_mouse_button_up(MouseButton button) @extname("IsMouseButtonUp");
func int get_mouse_x() @extname("GetMouseX");
func int get_mouse_y() @extname("GetMouseY");
func Vector2 get_mouse_position() @extname("GetMousePosition");
func Vector2 get_mouse_delta() @extname("GetMouseDelta");
func void set_mouse_position(int x, int y) @extname("SetMousePosition");
func void set_mouse_offset(int offsetX, int offsetY) @extname("SetMouseOffset");
func void set_mouse_scale(float scaleX, float scaleY) @extname("SetMouseScale");
func float get_mouse_wheel_move() @extname("GetMouseWheelMove");
func void set_mouse_cursor(int cursor) @extname("SetMouseCursor");
func int get_touch_x() @extname("GetTouchX");
func int get_touch_y() @extname("GetTouchY");
func Vector2 get_touch_position(int index) @extname("GetTouchPosition");
func void set_gestures_enabled(uint flags) @extname("SetGesturesEnabled");
func bool is_gesture_detected(int gesture) @extname("IsGestureDetected");
func int get_gesture_detected() @extname("GetGestureDetected");
func int get_touch_points_count() @extname("GetTouchPointsCount");
func float get_gesture_hold_duration() @extname("GetGestureHoldDuration");
func Vector2 get_gesture_drag_vector() @extname("GetGestureDragVector");
func float get_gesture_drag_angle() @extname("GetGestureDragAngle");
func Vector2 get_gesture_pinch_vector() @extname("GetGesturePinchVector");
func float get_gesture_pinch_angle() @extname("GetGesturePinchAngle");
func void set_camera_mode(Camera camera, CameraMode mode) @extname("SetCameraMode");
func void update_camera(Camera *camera) @extname("UpdateCamera");
func void set_camera_pan_control(int keyPan) @extname("SetCameraPanControl");
func void set_camera_alt_control(int keyAlt) @extname("SetCameraAltControl");
func void set_camera_smooth_zoom_control(int keySmoothZoom) @extname("SetCameraSmoothZoomControl");
func void set_camera_move_controls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown) @extname("SetCameraMoveControls");
func void set_shapes_texture(Texture2D texture, Rectangle source) @extname("SetShapesTexture");
func void draw_pixel(int posX, int posY, Color color) @extname("DrawPixel");
func void draw_pixel_v(Vector2 position, Color color) @extname("DrawPixelV");
func void draw_line(int startPosX, int startPosY, int endPosX, int endPosY, Color color) @extname("DrawLine");
func void draw_line_v(Vector2 startPos, Vector2 endPos, Color color) @extname("DrawLineV");
func void draw_line_ex(Vector2 startPos, Vector2 endPos, float thick, Color color) @extname("DrawLineEx");
func void draw_line_bezier(Vector2 startPos, Vector2 endPos, float thick, Color color) @extname("DrawLineBezier");
func void draw_line_bezier_quad(Vector2 startPos, Vector2 endPos, Vector2 controlPos, float thick, Color color) @extname("DrawLineBezierQuad");
func void draw_line_strip(Vector2 *points, int pointsCount, Color color) @extname("DrawLineStrip");
func void draw_circle(int centerX, int centerY, float radius, Color color) @extname("DrawCircle");
func void draw_circle_sector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color) @extname("DrawCircleSector");
func void draw_circle_sector_lines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color) @extname("DrawCircleSectorLines");
func void draw_circle_gradient(int centerX, int centerY, float radius, Color color1, Color color2) @extname("DrawCircleGradient");
func void draw_circle_v(Vector2 center, float radius, Color color) @extname("DrawCircleV");
func void draw_circle_lines(int centerX, int centerY, float radius, Color color) @extname("DrawCircleLines");
func void draw_ellipse(int centerX, int centerY, float radiusH, float radiusV, Color color) @extname("DrawEllipse");
func void draw_ellipse_lines(int centerX, int centerY, float radiusH, float radiusV, Color color) @extname("DrawEllipseLines");
func void draw_ring(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color) @extname("DrawRing");
func void draw_ring_lines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color) @extname("DrawRingLines");
func void draw_rectangle(int posX, int posY, int width, int height, Color color) @extname("DrawRectangle");
func void draw_rectangle_v(Vector2 position, Vector2 size, Color color) @extname("DrawRectangleV");
func void draw_rectangle_rec(Rectangle rec, Color color) @extname("DrawRectangleRec");
func void draw_rectangle_pro(Rectangle rec, Vector2 origin, float rotation, Color color) @extname("DrawRectanglePro");
func void draw_rectangle_gradient_v(int posX, int posY, int width, int height, Color color1, Color color2) @extname("DrawRectangleGradientV");
func void draw_rectangle_gradient_h(int posX, int posY, int width, int height, Color color1, Color color2) @extname("DrawRectangleGradientH");
func void draw_rectangle_gradient_ex(Rectangle rec, Color col1, Color col2, Color col3, Color col4) @extname("DrawRectangleGradientEx");
func void draw_rectangle_lines(int posX, int posY, int width, int height, Color color) @extname("DrawRectangleLines");
func void draw_rectangle_lines_ex(Rectangle rec, float lineThick, Color color) @extname("DrawRectangleLinesEx");
func void draw_rectangle_rounded(Rectangle rec, float roundness, int segments, Color color) @extname("DrawRectangleRounded");
func void draw_rectangle_rounded_lines(Rectangle rec, float roundness, int segments, float lineThick, Color color) @extname("DrawRectangleRoundedLines");
func void draw_triangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color) @extname("DrawTriangle");
func void draw_triangle_lines(Vector2 v1, Vector2 v2, Vector2 v3, Color color) @extname("DrawTriangleLines");
func void draw_triangle_fan(Vector2 *points, int pointsCount, Color color) @extname("DrawTriangleFan");
func void draw_triangle_strip(Vector2 *points, int pointsCount, Color color) @extname("DrawTriangleStrip");
func void draw_poly(Vector2 center, int sides, float radius, float rotation, Color color) @extname("DrawPoly");
func void draw_poly_lines(Vector2 center, int sides, float radius, float rotation, Color color) @extname("DrawPolyLines");
func void draw_poly_lines_ex(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color) @extname("DrawPolyLinesEx");
func bool check_collision_recs(Rectangle rec1, Rectangle rec2) @extname("CheckCollisionRecs");
func bool check_collision_circles(Vector2 center1, float radius1, Vector2 center2, float radius2) @extname("CheckCollisionCircles");
func bool check_collision_circle_rec(Vector2 center, float radius, Rectangle rec) @extname("CheckCollisionCircleRec");
func bool check_collision_point_rec(Vector2 point, Rectangle rec) @extname("CheckCollisionPointRec");
func bool check_collision_point_circle(Vector2 point, Vector2 center, float radius) @extname("CheckCollisionPointCircle");
func bool check_collision_point_triangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3) @extname("CheckCollisionPointTriangle");
func bool check_collision_lines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint) @extname("CheckCollisionLines");
func Rectangle get_collision_rec(Rectangle rec1, Rectangle rec2) @extname("GetCollisionRec");
func Image load_image(byte *fileName) @extname("LoadImage");
func Image load_image_raw(byte *fileName, int width, int height, int format, int headerSize) @extname("LoadImageRaw");
func Image load_image_anim(byte *fileName, int *frames) @extname("LoadImageAnim");
func Image load_image_from_memory(byte *fileType, byte *fileData, int dataSize) @extname("LoadImageFromMemory");
func Image load_image_from_texture(Texture2D texture) @extname("LoadImageFromTexture");
func Image load_image_from_screen() @extname("LoadImageFromScreen");
func void unload_image(Image image) @extname("UnloadImage");
func bool export_image(Image image, byte *fileName) @extname("ExportImage");
func bool export_image_as_code(Image image, byte *fileName) @extname("ExportImageAsCode");
func Image gen_image_color(int width, int height, Color color) @extname("GenImageColor");
func Image gen_image_gradient_v(int width, int height, Color top, Color bottom) @extname("GenImageGradientV");
func Image gen_image_gradient_h(int width, int height, Color left, Color right) @extname("GenImageGradientH");
func Image gen_image_gradient_radial(int width, int height, float density, Color inner, Color outer) @extname("GenImageGradientRadial");
func Image gen_image_checked(int width, int height, int checksX, int checksY, Color col1, Color col2) @extname("GenImageChecked");
func Image gen_image_white_noise(int width, int height, float factor) @extname("GenImageWhiteNoise");
func Image gen_image_perlin_noise(int width, int height, int offsetX, int offsetY, float scale) @extname("GenImagePerlinNoise");
func Image gen_image_cellular(int width, int height, int tileSize) @extname("GenImageCellular");
func Image image_copy(Image image) @extname("ImageCopy");
func Image image_from_image(Image image, Rectangle rec) @extname("ImageFromImage");
func Image image_text(byte *text, int fontSize, Color color) @extname("ImageText");
func Image image_text_ex(Font font, byte *text, float fontSize, float spacing, Color tint) @extname("ImageTextEx");
func void image_format(Image *image, int newFormat) @extname("ImageFormat");
func void image_to_pot(Image *image, Color fill) @extname("ImageToPOT");
func void image_crop(Image *image, Rectangle crop) @extname("ImageCrop");
func void image_alpha_crop(Image *image, float threshold) @extname("ImageAlphaCrop");
func void image_alpha_clear(Image *image, Color color, float threshold) @extname("ImageAlphaClear");
func void image_alpha_mask(Image *image, Image alphaMask) @extname("ImageAlphaMask");
func void image_alpha_premultiply(Image *image) @extname("ImageAlphaPremultiply");
func void image_resize(Image *image, int newWidth, int newHeight) @extname("ImageResize");
func void image_resize_nn(Image *image, int newWidth,int newHeight) @extname("ImageResizeNN");
func void image_resize_canvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill) @extname("ImageResizeCanvas");
func void image_mipmaps(Image *image) @extname("ImageMipmaps");
func void image_dither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp) @extname("ImageDither");
func void image_flip_vertical(Image *image) @extname("ImageFlipVertical");
func void image_flip_horizontal(Image *image) @extname("ImageFlipHorizontal");
func void image_rotate_cw(Image *image) @extname("ImageRotateCW");
func void image_rotate_ccw(Image *image) @extname("ImageRotateCCW");
func void image_color_tint(Image *image, Color color) @extname("ImageColorTint");
func void image_color_invert(Image *image) @extname("ImageColorInvert");
func void image_color_grayscale(Image *image) @extname("ImageColorGrayscale");
func void image_color_contrast(Image *image, float contrast) @extname("ImageColorContrast");
func void image_color_brightness(Image *image, int brightness) @extname("ImageColorBrightness");
func void image_color_replace(Image *image, Color color, Color replace) @extname("ImageColorReplace");
func Color *_load_image_colors(Image image) @extname("*LoadImageColors");
func Color *_load_image_palette(Image image, int maxPaletteSize, int *colorsCount) @extname("*LoadImagePalette");
func void unload_image_colors(Color *colors) @extname("UnloadImageColors");
func void unload_image_palette(Color *colors) @extname("UnloadImagePalette");
func Rectangle get_image_alpha_border(Image image, float threshold) @extname("GetImageAlphaBorder");
func void image_clear_background(Image *dst, Color color) @extname("ImageClearBackground");
func void image_draw_pixel(Image *dst, int posX, int posY, Color color) @extname("ImageDrawPixel");
func void image_draw_pixel_v(Image *dst, Vector2 position, Color color) @extname("ImageDrawPixelV");
func void image_draw_line(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color) @extname("ImageDrawLine");
func void image_draw_line_v(Image *dst, Vector2 start, Vector2 end, Color color) @extname("ImageDrawLineV");
func void image_draw_circle(Image *dst, int centerX, int centerY, int radius, Color color) @extname("ImageDrawCircle");
func void image_draw_circle_v(Image *dst, Vector2 center, int radius, Color color) @extname("ImageDrawCircleV");
func void image_draw_rectangle(Image *dst, int posX, int posY, int width, int height, Color color) @extname("ImageDrawRectangle");
func void image_draw_rectangle_v(Image *dst, Vector2 position, Vector2 size, Color color) @extname("ImageDrawRectangleV");
func void image_draw_rectangle_rec(Image *dst, Rectangle rec, Color color) @extname("ImageDrawRectangleRec");
func void image_draw_rectangle_lines(Image *dst, Rectangle rec, int thick, Color color) @extname("ImageDrawRectangleLines");
func void image_draw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint) @extname("ImageDraw");
func void image_draw_text(Image *dst, byte *text, int posX, int posY, int fontSize, Color color) @extname("ImageDrawText");
func void image_draw_text_ex(Image *dst, Font font, byte *text, Vector2 position, float fontSize, float spacing, Color tint) @extname("ImageDrawTextEx");
func Texture2D load_texture(byte *fileName) @extname("LoadTexture");
func Texture2D load_texture_from_image(Image image) @extname("LoadTextureFromImage");
func TextureCubemap load_texture_cubemap(Image image, int layout) @extname("LoadTextureCubemap");
func RenderTexture2D load_render_texture(int width, int height) @extname("LoadRenderTexture");
func void unload_texture(Texture2D texture) @extname("UnloadTexture");
func void unload_render_texture(RenderTexture2D target) @extname("UnloadRenderTexture");
func void update_texture(Texture2D texture, void *pixels) @extname("UpdateTexture");
func void update_texture_rec(Texture2D texture, Rectangle rec, void *pixels) @extname("UpdateTextureRec");
func void gen_texture_mipmaps(Texture2D *texture) @extname("GenTextureMipmaps");
func void set_texture_filter(Texture2D texture, int filter) @extname("SetTextureFilter");
func void set_texture_wrap(Texture2D texture, int wrap) @extname("SetTextureWrap");
func void draw_texture(Texture2D texture, int posX, int posY, Color tint) @extname("DrawTexture");
func void draw_texture_v(Texture2D texture, Vector2 position, Color tint) @extname("DrawTextureV");
func void draw_texture_ex(Texture2D texture, Vector2 position, float rotation, float scale, Color tint) @extname("DrawTextureEx");
func void draw_texture_rec(Texture2D texture, Rectangle source, Vector2 position, Color tint) @extname("DrawTextureRec");
func void draw_texture_quad(Texture2D texture, Vector2 tiling, Vector2 offset, Rectangle quad, Color tint) @extname("DrawTextureQuad");
func void draw_texture_tiled(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, float scale, Color tint) @extname("DrawTextureTiled");
func void draw_texture_pro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint) @extname("DrawTexturePro");
func void draw_texture_n_patch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint) @extname("DrawTextureNPatch");
func void draw_texture_poly(Texture2D texture, Vector2 center, Vector2 *points, Vector2 *texcoords, int pointsCount, Color tint) @extname("DrawTexturePoly");
func Color fade(Color color, float alpha) @extname("Fade");
func int color_to_int(Color color) @extname("ColorToInt");
func Vector4 color_normalize(Color color) @extname("ColorNormalize");
func Color color_from_normalized(Vector4 normalized) @extname("ColorFromNormalized");
func Vector3 color_to_hsv(Color color) @extname("ColorToHSV");
func Color color_from_hsv(float hue, float saturation, float value) @extname("ColorFromHSV");
func Color color_alpha(Color color, float alpha) @extname("ColorAlpha");
func Color color_alpha_blend(Color dst, Color src, Color tint) @extname("ColorAlphaBlend");
func Color get_color(int hexValue) @extname("GetColor");
func Color get_pixel_color(void *srcPtr, int format) @extname("GetPixelColor");
func void set_pixel_color(void *dstPtr, Color color, int format) @extname("SetPixelColor");
func int get_pixel_data_size(int width, int height, int format) @extname("GetPixelDataSize");
func Font get_font_default() @extname("GetFontDefault");
func Font load_font(byte *fileName) @extname("LoadFont");
func Font load_font_ex(byte *fileName, int fontSize, int *fontChars, int charsCount) @extname("LoadFontEx");
func Font load_font_from_image(Image image, Color key, int firstChar) @extname("LoadFontFromImage");
func Font load_font_from_memory(byte *fileType, byte *fileData, int dataSize, int fontSize, int *fontChars, int charsCount) @extname("LoadFontFromMemory");
func CharInfo *_load_font_data(byte *fileData, int dataSize, int fontSize, int *fontChars, int charsCount, int type) @extname("*LoadFontData");
func Image gen_image_font_atlas(CharInfo *chars, Rectangle **recs, int charsCount, int fontSize, int padding, int packMethod) @extname("GenImageFontAtlas");
func void unload_font_data(CharInfo *chars, int charsCount) @extname("UnloadFontData");
func void unload_font(Font font) @extname("UnloadFont");
func void draw_fps(int posX, int posY) @extname("DrawFPS");
func void draw_text(byte *text, int posX, int posY, int fontSize, Color color) @extname("DrawText");
func void draw_text_ex(Font font, byte *text, Vector2 position, float fontSize, float spacing, Color tint) @extname("DrawTextEx");
func void draw_text_rec(Font font, byte *text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint) @extname("DrawTextRec");
func void draw_text_rec_ex(Font font, byte *text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint, int selectStart, int selectLength, Color selectTint, Color selectBackTint) @extname("DrawTextRecEx");
func void draw_text_codepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint) @extname("DrawTextCodepoint");
func int measure_text(byte *text, int fontSize) @extname("MeasureText");
func Vector2 measure_text_ex(Font font, byte *text, float fontSize, float spacing) @extname("MeasureTextEx");
func int get_glyph_index(Font font, int codepoint) @extname("GetGlyphIndex");
func int text_copy(byte *dst, byte *src) @extname("TextCopy");
func bool text_is_equal(byte *text1, byte *text2) @extname("TextIsEqual");
func uint text_length(byte *text) @extname("TextLength");
func byte *_text_format(byte *text, ...) @extname("*TextFormat");
func byte *_text_subtext(byte *text, int position, int length) @extname("*TextSubtext");
func byte *_text_replace(byte *text, byte *replace, byte *by) @extname("*TextReplace");
func byte *_text_insert(byte *text, byte *insert, int position) @extname("*TextInsert");
func byte *_text_join(byte **textList, int count, byte *delimiter) @extname("*TextJoin");
func byte **_text_split(byte *text, byte delimiter, int *count) @extname("**TextSplit");
func void text_append(byte *text, byte *append, int *position) @extname("TextAppend");
func int text_find_index(byte *text, byte *find) @extname("TextFindIndex");
func byte *_text_to_upper(byte *text) @extname("*TextToUpper");
func byte *_text_to_lower(byte *text) @extname("*TextToLower");
func byte *_text_to_pascal(byte *text) @extname("*TextToPascal");
func int text_to_integer(byte *text) @extname("TextToInteger");
func byte *_text_to_utf8(int *codepoints, int length) @extname("*TextToUtf8");
func int *_load_codepoints(byte *text, int *count) @extname("*LoadCodepoints");
func void unload_codepoints(int *codepoints) @extname("UnloadCodepoints");
func int get_codepoints_count(byte *text) @extname("GetCodepointsCount");
func int get_codepoint(byte *text, int *bytesProcessed) @extname("GetCodepoint");
func byte *_codepoint_to_utf8(int codepoint, int *byteLength) @extname("*CodepointToUtf8");
func void draw_line3_d(Vector3 startPos, Vector3 endPos, Color color) @extname("DrawLine3D");
func void draw_point3_d(Vector3 position, Color color) @extname("DrawPoint3D");
func void draw_circle3_d(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color) @extname("DrawCircle3D");
func void draw_triangle3_d(Vector3 v1, Vector3 v2, Vector3 v3, Color color) @extname("DrawTriangle3D");
func void draw_triangle_strip3_d(Vector3 *points, int pointsCount, Color color) @extname("DrawTriangleStrip3D");
func void draw_cube(Vector3 position, float width, float height, float length, Color color) @extname("DrawCube");
func void draw_cube_v(Vector3 position, Vector3 size, Color color) @extname("DrawCubeV");
func void draw_cube_wires(Vector3 position, float width, float height, float length, Color color) @extname("DrawCubeWires");
func void draw_cube_wires_v(Vector3 position, Vector3 size, Color color) @extname("DrawCubeWiresV");
func void draw_cube_texture(Texture2D texture, Vector3 position, float width, float height, float length, Color color) @extname("DrawCubeTexture");
func void draw_sphere(Vector3 centerPos, float radius, Color color) @extname("DrawSphere");
func void draw_sphere_ex(Vector3 centerPos, float radius, int rings, int slices, Color color) @extname("DrawSphereEx");
func void draw_sphere_wires(Vector3 centerPos, float radius, int rings, int slices, Color color) @extname("DrawSphereWires");
func void draw_cylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color) @extname("DrawCylinder");
func void draw_cylinder_wires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color) @extname("DrawCylinderWires");
func void draw_plane(Vector3 centerPos, Vector2 size, Color color) @extname("DrawPlane");
func void draw_ray(Ray ray, Color color) @extname("DrawRay");
func void draw_grid(int slices, float spacing) @extname("DrawGrid");
func Model load_model(byte *fileName) @extname("LoadModel");
func Model load_model_from_mesh(Mesh mesh) @extname("LoadModelFromMesh");
func void unload_model(Model model) @extname("UnloadModel");
func void unload_model_keep_meshes(Model model) @extname("UnloadModelKeepMeshes");
func BoundingBox get_model_bounding_box(Model model) @extname("GetModelBoundingBox");
func void draw_model(Model model, Vector3 position, float scale, Color tint) @extname("DrawModel");
func void draw_model_ex(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint) @extname("DrawModelEx");
func void draw_model_wires(Model model, Vector3 position, float scale, Color tint) @extname("DrawModelWires");
func void draw_model_wires_ex(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint) @extname("DrawModelWiresEx");
func void draw_bounding_box(BoundingBox box, Color color) @extname("DrawBoundingBox");
func void draw_billboard(Camera camera, Texture2D texture, Vector3 position, float size, Color tint) @extname("DrawBillboard");
func void draw_billboard_rec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint) @extname("DrawBillboardRec");
func void draw_billboard_pro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Vector2 origin, float rotation, Color tint) @extname("DrawBillboardPro");
func void upload_mesh(Mesh *mesh, bool dynamic) @extname("UploadMesh");
func void update_mesh_buffer(Mesh mesh, int index, void *data, int dataSize, int offset) @extname("UpdateMeshBuffer");
func void unload_mesh(Mesh mesh) @extname("UnloadMesh");
func void draw_mesh(Mesh mesh, Material material, Matrix transform) @extname("DrawMesh");
func void draw_mesh_instanced(Mesh mesh, Material material, Matrix *transforms, int instances) @extname("DrawMeshInstanced");
func bool export_mesh(Mesh mesh, byte *fileName) @extname("ExportMesh");
func BoundingBox get_mesh_bounding_box(Mesh mesh) @extname("GetMeshBoundingBox");
func void gen_mesh_tangents(Mesh *mesh) @extname("GenMeshTangents");
func void gen_mesh_binormals(Mesh *mesh) @extname("GenMeshBinormals");
func Mesh gen_mesh_poly(int sides, float radius) @extname("GenMeshPoly");
func Mesh gen_mesh_plane(float width, float length, int resX, int resZ) @extname("GenMeshPlane");
func Mesh gen_mesh_cube(float width, float height, float length) @extname("GenMeshCube");
func Mesh gen_mesh_sphere(float radius, int rings, int slices) @extname("GenMeshSphere");
func Mesh gen_mesh_hemi_sphere(float radius, int rings, int slices) @extname("GenMeshHemiSphere");
func Mesh gen_mesh_cylinder(float radius, float height, int slices) @extname("GenMeshCylinder");
func Mesh gen_mesh_cone(float radius, float height, int slices) @extname("GenMeshCone");
func Mesh gen_mesh_torus(float radius, float size, int radSeg, int sides) @extname("GenMeshTorus");
func Mesh gen_mesh_knot(float radius, float size, int radSeg, int sides) @extname("GenMeshKnot");
func Mesh gen_mesh_heightmap(Image heightmap, Vector3 size) @extname("GenMeshHeightmap");
func Mesh gen_mesh_cubicmap(Image cubicmap, Vector3 cubeSize) @extname("GenMeshCubicmap");
func Material *_load_materials(byte *fileName, int *materialCount) @extname("*LoadMaterials");
func Material load_material_default() @extname("LoadMaterialDefault");
func void unload_material(Material material) @extname("UnloadMaterial");
func void set_material_texture(Material *material, int mapType, Texture2D texture) @extname("SetMaterialTexture");
func void set_model_mesh_material(Model *model, int meshId, int materialId) @extname("SetModelMeshMaterial");
func ModelAnimation *_load_model_animations(byte *fileName, int *animsCount) @extname("*LoadModelAnimations");
func void update_model_animation(Model model, ModelAnimation anim, int frame) @extname("UpdateModelAnimation");
func void unload_model_animation(ModelAnimation anim) @extname("UnloadModelAnimation");
func void unload_model_animations(ModelAnimation* animations, uint count) @extname("UnloadModelAnimations");
func bool is_model_animation_valid(Model model, ModelAnimation anim) @extname("IsModelAnimationValid");
func bool check_collision_spheres(Vector3 center1, float radius1, Vector3 center2, float radius2) @extname("CheckCollisionSpheres");
func bool check_collision_boxes(BoundingBox box1, BoundingBox box2) @extname("CheckCollisionBoxes");
func bool check_collision_box_sphere(BoundingBox box, Vector3 center, float radius) @extname("CheckCollisionBoxSphere");
func RayCollision get_ray_collision_sphere(Ray ray, Vector3 center, float radius) @extname("GetRayCollisionSphere");
func RayCollision get_ray_collision_box(Ray ray, BoundingBox box) @extname("GetRayCollisionBox");
func RayCollision get_ray_collision_model(Ray ray, Model model) @extname("GetRayCollisionModel");
func RayCollision get_ray_collision_mesh(Ray ray, Mesh mesh, Matrix transform) @extname("GetRayCollisionMesh");
func RayCollision get_ray_collision_triangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3) @extname("GetRayCollisionTriangle");
func RayCollision get_ray_collision_quad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4) @extname("GetRayCollisionQuad");
func void init_audio_device() @extname("InitAudioDevice");
func void close_audio_device() @extname("CloseAudioDevice");
func bool is_audio_device_ready() @extname("IsAudioDeviceReady");
func void set_master_volume(float volume) @extname("SetMasterVolume");
func Wave load_wave(byte *fileName) @extname("LoadWave");
func Wave load_wave_from_memory(byte *fileType, byte *fileData, int dataSize) @extname("LoadWaveFromMemory");
func Sound load_sound(byte *fileName) @extname("LoadSound");
func Sound load_sound_from_wave(Wave wave) @extname("LoadSoundFromWave");
func void update_sound(Sound sound, void *data, int samplesCount) @extname("UpdateSound");
func void unload_wave(Wave wave) @extname("UnloadWave");
func void unload_sound(Sound sound) @extname("UnloadSound");
func bool export_wave(Wave wave, byte *fileName) @extname("ExportWave");
func bool export_wave_as_code(Wave wave, byte *fileName) @extname("ExportWaveAsCode");
func void play_sound(Sound sound) @extname("PlaySound");
func void stop_sound(Sound sound) @extname("StopSound");
func void pause_sound(Sound sound) @extname("PauseSound");
func void resume_sound(Sound sound) @extname("ResumeSound");
func void play_sound_multi(Sound sound) @extname("PlaySoundMulti");
func void stop_sound_multi() @extname("StopSoundMulti");
func int get_sounds_playing() @extname("GetSoundsPlaying");
func bool is_sound_playing(Sound sound) @extname("IsSoundPlaying");
func void set_sound_volume(Sound sound, float volume) @extname("SetSoundVolume");
func void set_sound_pitch(Sound sound, float pitch) @extname("SetSoundPitch");
func void wave_format(Wave *wave, int sampleRate, int sampleSize, int channels) @extname("WaveFormat");
func Wave wave_copy(Wave wave) @extname("WaveCopy");
func void wave_crop(Wave *wave, int initSample, int finalSample) @extname("WaveCrop");
func float *_load_wave_samples(Wave wave) @extname("*LoadWaveSamples");
func void unload_wave_samples(float *samples) @extname("UnloadWaveSamples");
func Music load_music_stream(byte *fileName) @extname("LoadMusicStream");
func Music load_music_stream_from_memory(byte *fileType, byte *data, int dataSize) @extname("LoadMusicStreamFromMemory");
func void unload_music_stream(Music music) @extname("UnloadMusicStream");
func void play_music_stream(Music music) @extname("PlayMusicStream");
func bool is_music_stream_playing(Music music) @extname("IsMusicStreamPlaying");
func void update_music_stream(Music music) @extname("UpdateMusicStream");
func void stop_music_stream(Music music) @extname("StopMusicStream");
func void pause_music_stream(Music music) @extname("PauseMusicStream");
func void resume_music_stream(Music music) @extname("ResumeMusicStream");
func void set_music_volume(Music music, float volume) @extname("SetMusicVolume");
func void set_music_pitch(Music music, float pitch) @extname("SetMusicPitch");
func float get_music_time_length(Music music) @extname("GetMusicTimeLength");
func float get_music_time_played(Music music) @extname("GetMusicTimePlayed");
func AudioStream load_audio_stream(uint sampleRate, uint sampleSize, uint channels) @extname("LoadAudioStream");
func void unload_audio_stream(AudioStream stream) @extname("UnloadAudioStream");
func void update_audio_stream(AudioStream stream, void *data, int samplesCount) @extname("UpdateAudioStream");
func bool is_audio_stream_processed(AudioStream stream) @extname("IsAudioStreamProcessed");
func void play_audio_stream(AudioStream stream) @extname("PlayAudioStream");
func void pause_audio_stream(AudioStream stream) @extname("PauseAudioStream");
func void resume_audio_stream(AudioStream stream) @extname("ResumeAudioStream");
func bool is_audio_stream_playing(AudioStream stream) @extname("IsAudioStreamPlaying");
func void stop_audio_stream(AudioStream stream) @extname("StopAudioStream");
func void set_audio_stream_volume(AudioStream stream, float volume) @extname("SetAudioStreamVolume");
func void set_audio_stream_pitch(AudioStream stream, float pitch) @extname("SetAudioStreamPitch");
func void set_audio_stream_buffer_size_default(int size) @extname("SetAudioStreamBufferSizeDefault");

