module raylibc3;

func CFloat Clamp(CFloat value, CFloat min, CFloat max);
func CFloat Lerp(CFloat start, CFloat end, CFloat amount);
func CFloat Normalize(CFloat value, CFloat start, CFloat end);
func CFloat Remap(CFloat value, CFloat inputStart, CFloat inputEnd, CFloat outputStart, CFloat outputEnd);
func Vector2 Vector2Zero();
func Vector2 Vector2One();
func Vector2 Vector2Add(Vector2 v1, Vector2 v2);
func Vector2 Vector2AddValue(Vector2 v, CFloat add);
func Vector2 Vector2Subtract(Vector2 v1, Vector2 v2);
func Vector2 Vector2SubtractValue(Vector2 v, CFloat sub);
func CFloat Vector2Length(Vector2 v);
func CFloat Vector2LengthSqr(Vector2 v);
func CFloat Vector2DotProduct(Vector2 v1, Vector2 v2);
func CFloat Vector2Distance(Vector2 v1, Vector2 v2);
func CFloat Vector2Angle(Vector2 v1, Vector2 v2);
func Vector2 Vector2Scale(Vector2 v, CFloat scale);
func Vector2 Vector2Multiply(Vector2 v1, Vector2 v2);
func Vector2 Vector2Negate(Vector2 v);
func Vector2 Vector2Divide(Vector2 v1, Vector2 v2);
func Vector2 Vector2Normalize(Vector2 v);
func Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, CFloat amount);
func Vector2 Vector2Reflect(Vector2 v, Vector2 normal);
func Vector2 Vector2Rotate(Vector2 v, CFloat degs);
func Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, CFloat maxDistance);
func Vector3 Vector3Zero();
func Vector3 Vector3One();
func Vector3 Vector3Add(Vector3 v1, Vector3 v2);
func Vector3 Vector3AddValue(Vector3 v, CFloat add);
func Vector3 Vector3Subtract(Vector3 v1, Vector3 v2);
func Vector3 Vector3SubtractValue(Vector3 v, CFloat sub);
func Vector3 Vector3Scale(Vector3 v, CFloat scalar);
func Vector3 Vector3Multiply(Vector3 v1, Vector3 v2);
func Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2);
func Vector3 Vector3Perpendicular(Vector3 v);
func CFloat Vector3Length(Vector3 v);
func CFloat Vector3LengthSqr(Vector3 v);
func CFloat Vector3DotProduct(Vector3 v1, Vector3 v2);
func CFloat Vector3Distance(Vector3 v1, Vector3 v2);
func Vector3 Vector3Negate(Vector3 v);
func Vector3 Vector3Divide(Vector3 v1, Vector3 v2);
func Vector3 Vector3Normalize(Vector3 v);
func void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2);
func Vector3 Vector3Transform(Vector3 v, Matrix mat);
func Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q);
func Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, CFloat amount);
func Vector3 Vector3Reflect(Vector3 v, Vector3 normal);
func Vector3 Vector3Min(Vector3 v1, Vector3 v2);
func Vector3 Vector3Max(Vector3 v1, Vector3 v2);
func Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c);
func float3 Vector3ToFloatV(Vector3 v);
func CFloat MatrixDeterminant(Matrix mat);
func CFloat MatrixTrace(Matrix mat);
func Matrix MatrixTranspose(Matrix mat);
func Matrix MatrixInvert(Matrix mat);
func Matrix MatrixNormalize(Matrix mat);
func Matrix MatrixIdentity();
func Matrix MatrixAdd(Matrix left, Matrix right);
func Matrix MatrixSubtract(Matrix left, Matrix right);
func Matrix MatrixMultiply(Matrix left, Matrix right);
func Matrix MatrixTranslate(CFloat x, CFloat y, CFloat z);
func Matrix MatrixRotate(Vector3 axis, CFloat angle);
func Matrix MatrixRotateX(CFloat angle);
func Matrix MatrixRotateY(CFloat angle);
func Matrix MatrixRotateZ(CFloat angle);
func Matrix MatrixRotateXYZ(Vector3 ang);
func Matrix MatrixRotateZYX(Vector3 ang);
func Matrix MatrixScale(CFloat x, CFloat y, CFloat z);
func Matrix MatrixFrustum(CDouble left, CDouble right, CDouble bottom, CDouble top, CDouble near, CDouble far);
func Matrix MatrixPerspective(CDouble fovy, CDouble aspect, CDouble near, CDouble far);
func Matrix MatrixOrtho(CDouble left, CDouble right, CDouble bottom, CDouble top, CDouble near, CDouble far);
func Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up);
func float16 MatrixToFloatV(Matrix mat);
func Quaternion QuaternionAdd(Quaternion q1, Quaternion q2);
func Quaternion QuaternionAddValue(Quaternion q, CFloat add);
func Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2);
func Quaternion QuaternionSubtractValue(Quaternion q, CFloat sub);
func Quaternion QuaternionIdentity();
func CFloat QuaternionLength(Quaternion q);
func Quaternion QuaternionNormalize(Quaternion q);
func Quaternion QuaternionInvert(Quaternion q);
func Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2);
func Quaternion QuaternionScale(Quaternion q, CFloat mul);
func Quaternion QuaternionDivide(Quaternion q1, Quaternion q2);
func Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, CFloat amount);
func Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, CFloat amount);
func Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, CFloat amount);
func Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to);
func Quaternion QuaternionFromMatrix(Matrix mat);
func Matrix QuaternionToMatrix(Quaternion q);
func Quaternion QuaternionFromAxisAngle(Vector3 axis, CFloat angle);
func void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, CFloat *outAngle);
func Quaternion QuaternionFromEuler(CFloat pitch, CFloat yaw, CFloat roll);
func Vector3 QuaternionToEuler(Quaternion q);
func Quaternion QuaternionTransform(Quaternion q, Matrix mat);
func Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view);

func CFloat Clamp(CFloat value, CFloat min, CFloat max);
func CFloat Lerp(CFloat start, CFloat end, CFloat amount);
func CFloat Normalize(CFloat value, CFloat start, CFloat end);
func CFloat Remap(CFloat value, CFloat inputStart, CFloat inputEnd, CFloat outputStart, CFloat outputEnd);
func Vector2 Vector2Zero();
func Vector2 Vector2One();
func Vector2 Vector2Add(Vector2 v1, Vector2 v2);
func Vector2 Vector2AddValue(Vector2 v, CFloat add);
func Vector2 Vector2Subtract(Vector2 v1, Vector2 v2);
func Vector2 Vector2SubtractValue(Vector2 v, CFloat sub);
func CFloat Vector2Length(Vector2 v);
func CFloat Vector2LengthSqr(Vector2 v);
func CFloat Vector2DotProduct(Vector2 v1, Vector2 v2);
func CFloat Vector2Distance(Vector2 v1, Vector2 v2);
func CFloat Vector2Angle(Vector2 v1, Vector2 v2);
func Vector2 Vector2Scale(Vector2 v, CFloat scale);
func Vector2 Vector2Multiply(Vector2 v1, Vector2 v2);
func Vector2 Vector2Negate(Vector2 v);
func Vector2 Vector2Divide(Vector2 v1, Vector2 v2);
func Vector2 Vector2Normalize(Vector2 v);
func Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, CFloat amount);
func Vector2 Vector2Reflect(Vector2 v, Vector2 normal);
func Vector2 Vector2Rotate(Vector2 v, CFloat degs);
func Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, CFloat maxDistance);
func Vector3 Vector3Zero();
func Vector3 Vector3One();
func Vector3 Vector3Add(Vector3 v1, Vector3 v2);
func Vector3 Vector3AddValue(Vector3 v, CFloat add);
func Vector3 Vector3Subtract(Vector3 v1, Vector3 v2);
func Vector3 Vector3SubtractValue(Vector3 v, CFloat sub);
func Vector3 Vector3Scale(Vector3 v, CFloat scalar);
func Vector3 Vector3Multiply(Vector3 v1, Vector3 v2);
func Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2);
func Vector3 Vector3Perpendicular(Vector3 v);
func CFloat Vector3Length(Vector3 v);
func CFloat Vector3LengthSqr(Vector3 v);
func CFloat Vector3DotProduct(Vector3 v1, Vector3 v2);
func CFloat Vector3Distance(Vector3 v1, Vector3 v2);
func Vector3 Vector3Negate(Vector3 v);
func Vector3 Vector3Divide(Vector3 v1, Vector3 v2);
func Vector3 Vector3Normalize(Vector3 v);
func void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2);
func Vector3 Vector3Transform(Vector3 v, Matrix mat);
func Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q);
func Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, CFloat amount);
func Vector3 Vector3Reflect(Vector3 v, Vector3 normal);
func Vector3 Vector3Min(Vector3 v1, Vector3 v2);
func Vector3 Vector3Max(Vector3 v1, Vector3 v2);
func Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c);
func float3 Vector3ToFloatV(Vector3 v);
func CFloat MatrixDeterminant(Matrix mat);
func CFloat MatrixTrace(Matrix mat);
func Matrix MatrixTranspose(Matrix mat);
func Matrix MatrixInvert(Matrix mat);
func Matrix MatrixNormalize(Matrix mat);
func Matrix MatrixIdentity();
func Matrix MatrixAdd(Matrix left, Matrix right);
func Matrix MatrixSubtract(Matrix left, Matrix right);
func Matrix MatrixMultiply(Matrix left, Matrix right);
func Matrix MatrixTranslate(CFloat x, CFloat y, CFloat z);
func Matrix MatrixRotate(Vector3 axis, CFloat angle);
func Matrix MatrixRotateX(CFloat angle);
func Matrix MatrixRotateY(CFloat angle);
func Matrix MatrixRotateZ(CFloat angle);
func Matrix MatrixRotateXYZ(Vector3 ang);
func Matrix MatrixRotateZYX(Vector3 ang);
func Matrix MatrixScale(CFloat x, CFloat y, CFloat z);
func Matrix MatrixFrustum(CDouble left, CDouble right, CDouble bottom, CDouble top, CDouble near, CDouble far);
func Matrix MatrixPerspective(CDouble fovy, CDouble aspect, CDouble near, CDouble far);
func Matrix MatrixOrtho(CDouble left, CDouble right, CDouble bottom, CDouble top, CDouble near, CDouble far);
func Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up);
func float16 MatrixToFloatV(Matrix mat);
func Quaternion QuaternionAdd(Quaternion q1, Quaternion q2);
func Quaternion QuaternionAddValue(Quaternion q, CFloat add);
func Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2);
func Quaternion QuaternionSubtractValue(Quaternion q, CFloat sub);
func Quaternion QuaternionIdentity();
func CFloat QuaternionLength(Quaternion q);
func Quaternion QuaternionNormalize(Quaternion q);
func Quaternion QuaternionInvert(Quaternion q);
func Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2);
func Quaternion QuaternionScale(Quaternion q, CFloat mul);
func Quaternion QuaternionDivide(Quaternion q1, Quaternion q2);
func Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, CFloat amount);
func Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, CFloat amount);
func Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, CFloat amount);
func Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to);
func Quaternion QuaternionFromMatrix(Matrix mat);
func Matrix QuaternionToMatrix(Quaternion q);
func Quaternion QuaternionFromAxisAngle(Vector3 axis, CFloat angle);
func void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, CFloat *outAngle);
func Quaternion QuaternionFromEuler(CFloat pitch, CFloat yaw, CFloat roll);
func Vector3 QuaternionToEuler(Quaternion q);
func Quaternion QuaternionTransform(Quaternion q, Matrix mat);
func Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view);
